@page "/functions"
@using OpenAI
@using OpenAI.Chat
@using OpenAI.Models
@using System.Text.Json
@using System.Text.Json.Nodes
@inject IConfiguration Configuration
@inject IJSRuntime JsRuntime
<PageTitle>Chat GPT</PageTitle>

<style>
    textarea {
        border: 1px dashed #888;
        border-radius: 5px;
        width: 80%;
        overflow: auto;
        background: #f7f7f7;
    }

    .assistant, .user {
        position: relative;
        font-family: arial;
        font-size: 1.1em;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
    }

        .assistant:after, .user:after {
            content: '';
            border: 20px solid transparent;
            position: absolute;
            margin-top: -30px;
        }

    .user {
        background: #03a9f4;
        color: #fff;
        margin-left: 20%;
        margin-right: 100px;
        text-align: right;
    }

        .user:after {
            border-left-color: #03a9f4;
            border-right: 0;
            right: -20px;
        }

    .assistant {
        background: #4CAF50;
        color: #fff;
        margin-left: 100px;
        margin-right: 20%;
    }

        .assistant:after {
            border-right-color: #4CAF50;
            border-left: 0;
            left: -20px;
        }

    .msg {
        font-size: medium;
    }
</style>

<h1>ChatGPT</h1>

<div id="chatcontainer" style="height:550px; width:80%; overflow: scroll;">
    @foreach (var item in chatMessages)
    {
        @if (item.ToolCalls == null)
        {
            <div class="@GetMessageClass(item)">
                <b>@GetSenderTitle(item)</b>
                <div class="msg">@((MarkupString)item.Content.ToString())</div>
            </div>
        }
    }
</div>

@if (!Processing)
{
    <textarea rows="3" cols="60" @bind="prompt"></textarea>
    <br />
    <button class="btn btn-primary" @onclick="CallChatGPT">Call ChatGPT</button>
    <button class="btn btn-info" @onclick="RestartChatGPT">Restart</button>
}
else
{
    <h4>Processing...</h4>
}

<p style="color:red">@ErrorMessage</p>

@code {
#nullable disable
    string Organization, ApiKey;
    List<Message> chatMessages = new List<Message>();
    string prompt = "Add the following item to my list Get milk";
    string ErrorMessage = "";
    bool Processing = false;

    protected override void OnInitialized()
    {
        Organization = Configuration["OpenAIServiceOptions:Organization"] ?? "";
        ApiKey = Configuration["OpenAIServiceOptions:ApiKey"] ?? "";
        chatMessages.Add(new Message(Role.System, "You are helpful Assistant"));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JsRuntime.InvokeVoidAsync("ScrollToBottom", "chatcontainer");
            }
            catch { }
        }
    }

    async Task CallChatGPT()
    {
        Processing = true;
        ErrorMessage = "";
        try
        {
            var api = new OpenAIClient(new OpenAIAuthentication(ApiKey, Organization));
            chatMessages.Add(new Message(Role.User, prompt));

            var chatRequest = CreateChatRequest();
            var result = await api.ChatEndpoint.GetCompletionAsync(chatRequest);

            if (result.FirstChoice.FinishReason == "tool_calls")
            {
                foreach (var choice in result.Choices)
                {
                    chatMessages = ExecuteTool(choice, chatMessages);
                    result = await api.ChatEndpoint.GetCompletionAsync(CreateChatRequest());
                }
            }
            else
            {
                AddResponseToChat(result.Choices.FirstOrDefault().Message);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            prompt = "";
            Processing = false;
        }
    }

    void RestartChatGPT()
    {
        prompt = "Type your message here";
        chatMessages.Clear();
        ErrorMessage = "";
    }

    ChatRequest CreateChatRequest()
    {
        var DefinedTools = new List<Tool>
            {
                new Function(
                    "Todos_POST",
                    @"Creates a new TODO item.
                        Use this Tool to add a new TODO item to the list.".Trim(),
                    new JsonObject
                    {
                        ["type"] = "object",
                        ["properties"] = new JsonObject
                        {
                            ["TodoRequest"] = new JsonObject
                            {
                                ["type"] = "object",
                                ["properties"] = new JsonObject
                                {
                                    ["todo"] = new JsonObject
                                    {
                                        ["type"] = "string",
                                        ["description"] = @"The TODO item to be added."
                                    }
                                },
                                ["required"] = new JsonArray { "todo" }
                            }
                        },
                        ["required"] = new JsonArray { "TodoRequest" }
                    }),
                new Function(
                    "Todos_GET",
                    @"Retrieves the TODO list.
                        Use this Tool to view the TODO list.".Trim(),
                    new JsonObject
                    {
                        ["type"] = "object",
                        ["properties"] = new JsonObject {}
                    }),
                new Function(
                    "Todos_DELETE",
                    @"Deletes a specific TODO item from the list.
                        Use this Tool to remove a TODO item from the list.".Trim(),
                    new JsonObject
                    {
                        ["type"] = "object",
                        ["properties"] = new JsonObject
                        {
                            ["TodoIndexRequest"] = new JsonObject
                            {
                                ["type"] = "object",
                                ["properties"] = new JsonObject
                                {
                                    ["todoIdx"] = new JsonObject
                                    {
                                        ["type"] = "integer",
                                        ["description"] = @"The index of the TODO item to be deleted."
                                    }
                                },
                                ["required"] = new JsonArray { "todoIdx" }
                            }
                        },
                        ["required"] = new JsonArray { "TodoIndexRequest" }
                    })
            };

        return new ChatRequest(chatMessages, tools: DefinedTools, toolChoice: "auto", model: "gpt-3.5-turbo-0613");
    }

    void AddResponseToChat(Message choice)
    {
        if (choice != null)
            chatMessages.Add(choice);
    }

    string GetMessageClass(Message item)
    {
        return item.Role == Role.User ? "user" : "assistant";
    }

    string GetSenderTitle(Message item)
    {
        return item.Role == Role.User ? "Human" : "ChatGPT";
    }

    // *** Tools ***

    private List<Message> ExecuteTool(
    Choice ChatResponseResult, List<Message> ParamChatPrompts)
    {
        // Add the Tool call to the chatMessages
        ParamChatPrompts.Add(ChatResponseResult.Message);

        // Get Tool
        var Tool =
        ChatResponseResult.Message.ToolCalls.FirstOrDefault();

        // Get the arguments
        var ToolArgs =
        ChatResponseResult.Message.ToolCalls.FirstOrDefault().Function.Arguments.ToString();

        // Get the Tool name
        var ToolName =
        ChatResponseResult.Message.ToolCalls.FirstOrDefault().Function.Name;

        // Variable to hold the Tool result
        string ToolResult = "";

        // Use select case to call the Tool
        switch (ToolName)
        {
            case "Todos_POST":
                var NewTODO =
                JsonSerializer.Deserialize<ToDoAddRequest>(ToolArgs);
                if (NewTODO != null)
                {
                    ToolResult = AddTodo(NewTODO.TodoRequest.todo);
                }
                break;
            case "Todos_GET":
                ToolResult = GetTodos();
                break;
            case "Todos_DELETE":
                var DeleteTODO =
                JsonSerializer.Deserialize<ToDoRemoveRequest>(ToolArgs);
                if (DeleteTODO != null)
                {
                    ToolResult =
                    DeleteTodo(DeleteTODO.TodoIndexRequest.todoIdx);
                }
                break;
            default:
                break;
        }

        // Call ChatGPT again with the results of the Tool
        ParamChatPrompts.Add(
            new Message(Tool, ToolResult)
        );

        return ParamChatPrompts;
    }

    private static readonly List<string> _TODOS = new List<string>();
    public string AddTodo(string NewToDO)
    {
        _TODOS.Add(NewToDO);
        return $"{NewToDO} added";
    }
    public string GetTodos()
    {
        return JsonSerializer.Serialize<List<string>>(_TODOS);
    }
    public string DeleteTodo(int TodoIdxInt)
    {
        if (TodoIdxInt >= 0 && TodoIdxInt < _TODOS.Count)
        {
            _TODOS.RemoveAt(TodoIdxInt);
            return $"TODO {TodoIdxInt} deleted";
        }
        else
        {
            return "TODO not found";
        }
    }

    public class ToDoAddRequest
    {
        public Todorequest TodoRequest { get; set; }
    }
    public class Todorequest
    {
        public string todo { get; set; }
    }
    public class ToDoRemoveRequest
    {
        public Todoindexrequest TodoIndexRequest { get; set; }
    }
    public class Todoindexrequest
    {
        public int todoIdx { get; set; }
    }
}