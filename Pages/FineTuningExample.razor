@page "/finetuningexample"
@using OpenAI;
@using OpenAI.Chat
@using OpenAI.Files;
@using OpenAI.FineTuning;
@using OpenAI.Models;
@inject IJSRuntime JSRuntime
@inject IConfiguration _configuration
<PageTitle>Fine Tuning Example</PageTitle>
<style>
    .scrollable-list {
        height: 200px;
        overflow-y: scroll;
    }
</style>
<h1>Fine Tuning Example</h1>
<br />
<button class="btn btn-success"
        @onclick="UploadFile">
    Upload SentimentSample.jsonl File
</button>
<br />
<br />
@if (ColFileData.Count > 0)
{
    <h4>
        <button class="btn btn-secondary"
            @onclick="(() => ListFiles())">
            Refesh
        </button> Files
    </h4>
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in ColFileData)
            {
                <tr>
                    <td>
                        <a href="javascript:void(0)"
                           onclick="@(() => DownloadFile(file))">
                            @file.FileName
                        </a> (@file.Purpose - @file.Size bytes) [@file.CreatedAt]
                    </td>
                    <td>
                        <!--  Only allow fine-tune jobs to be created -->
                        <!--  for files with the purpose "fine-tune" -->
                        @if (file.Purpose == "fine-tune")
                        {
                            <button class="btn btn-success"
                        @onclick="(() => CreateFineTuneJob(file))">
                                Create Fine Tune Job
                            </button>
                        }
                        &nbsp;
                        <button class="btn btn-danger"
                        @onclick="(() => DeleteFile(file))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- FineTuneJobs -->
@if (colFineTuneJob.Any())
{
    <h4>
        <button class="btn btn-secondary"
            @onclick="(() => ListFineTuneJobs())">
            Refesh
        </button> FineTune Jobs
    </h4>
    <div class="scrollable-list">
        <ul>
            @foreach (
           var job in colFineTuneJob.OrderByDescending(x => x.CreatedAt))
            {
                <li>@job.Id @job.FineTunedModel (@job.Status) [@job.CreatedAt]</li>
            }
        </ul>
    </div>
    <br />
}

<!-- Models -->
@if (colModels.Count > 0)
{
    <h4>
        <button class="btn btn-secondary"
            @onclick="(() => ListModels())">
            Refesh
        </button> Models
    </h4>
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var model in colModels)
            {
                <tr>
                    <td>
                        @model.Id
                    </td>
                    <td>
                        <button class="btn btn-danger"
                        @onclick="(() => DeleteModel(model))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<br />

<!-- Completion -->
@if (colModels.Count > 0)
{
    <h4>
        <button class="btn btn-secondary"
            @onclick="(() => ListModels())">
            Refesh
        </button> Completions
    </h4>
    <p>
        Model:<span>&nbsp;</span>
        <select id="Completion" style="width:400px"
            @bind="@CompletionModel">
            <option value="">Select Model</option>
            @foreach (var model in colModels)
            {
                <option value="@model.Id">@model.Id</option>
            }
        </select>
        <span>&nbsp;</span>
        <input id="newJobName" type="text" style="width:400px"
           @bind="@CompletionPrompt" />
        <span>&nbsp;</span>
        <button type="button" class="btn btn-primary"
            @onclick="(() => SubmitCompletion())">
            Submit
        </button>
    </p>
    <br />
    <p>@CompletionResponse</p>
    <br />
}

@code {
    // Declare variables for organization, API key,
    // and collections of objects
    string Organization = "";
    string ApiKey = "";
    List<FileResponse> ColFileData = new List<FileResponse>();

    // Declare nullable objects for file data and fine-tuning job
    FileResponse? fileData;
    FineTuneJobResponse? fineTuneJob;

    // Declare collections for events, fine-tuning jobs, and models
    List<FineTuneJobResponse> colFineTuneJob = new List<FineTuneJobResponse>();
    List<Model> colModels = new List<Model>();

    // Declare variables for completion model, prompt, and response
    string CompletionModel = "";
    string CompletionPrompt = "I text on my iPhone ->";
    string CompletionResponse = "";

    // Initialize component, set organization and API key,
    // and call listing methods
    protected override async Task OnInitializedAsync()
    {
        // Set the organization value from the configuration
        // or use an empty string if not found
        Organization =
        _configuration["OpenAIServiceOptions:Organization"] ?? "";

        // Set the API key value from the configuration
        // or use an empty string if not found
        ApiKey =
        _configuration["OpenAIServiceOptions:ApiKey"] ?? "";

        // Call the ListFiles method to list files
        // using the OpenAI API
        await ListFiles();

        // Call the ListFineTuneJobs method to list
        // fine-tune jobs using the OpenAI API
        await ListFineTuneJobs();

        // Call the ListModels method to list
        // models using the OpenAI API
        await ListModels();
    }

    // Files

    // List files using OpenAI API
    private async Task ListFiles()
    {
        // Create a new OpenAI API client with
        // the provided API key and organization
        var api =
        new OpenAIClient(new OpenAIAuthentication(ApiKey, Organization));

        // Call the ListFilesAsync method to
        // fetch files from the OpenAI API
        var files = await api.FilesEndpoint.ListFilesAsync();

        // Convert the fetched files to a list
        // and assign it to the ColFileData variable
        ColFileData = files.ToList();
    }

    // Upload file using OpenAI API
    private async Task UploadFile()
    {
        // Create a new OpenAI API client with
        // the provided API key and organization
        var api =
        new OpenAIClient(new OpenAIAuthentication(ApiKey, Organization));

        // Upload the file located at "SampleData/SentimentSample.jsonl"
        // for fine-tuning using the OpenAI API
        fileData =
        await api.FilesEndpoint.UploadFileAsync(
        @"SampleData/SentimentSample.jsonl", "fine-tune");
    }

    // Delete file using OpenAI API
    private async Task DeleteFile(FileResponse paramaFile)
    {
        // Create a new OpenAI API client with the provided
        // API key and organization
        var api =
        new OpenAIClient(new OpenAIAuthentication(ApiKey, Organization));

        // Delete the specified file (paramaFile) using the OpenAI API
        var result = await api.FilesEndpoint.DeleteFileAsync(paramaFile);

        // Update the list of files by calling the ListFiles method
        await ListFiles();
    }

    // Download file using OpenAI API
    private async Task DownloadFile(FileResponse paramaFile)
    {
        // Create a new OpenAI API client with the provided
        // API key and organization
        var api =
        new OpenAIClient(new OpenAIAuthentication(ApiKey, Organization));

        // Download the specified file (paramaFile) using the
        // OpenAI API and store the path to the downloaded file
        var downloadedFilePath =
        await api.FilesEndpoint.DownloadFileAsync(paramaFile, "data");

        // Load the content of the downloaded file into a byte array
        var filecontents = System.IO.File.ReadAllBytes(downloadedFilePath);

        // Invoke a JavaScript function to save the downloaded
        // file content as a file with the original file name
        await JSRuntime.InvokeVoidAsync(
        "saveAsFile",
        paramaFile.FileName,
        Convert.ToBase64String(filecontents.ToArray()));
    }

    // FineTune

    private async Task CreateFineTuneJob(FileResponse paramaFile)
    {
        // Create a new OpenAI API client with the
        // provided API key and organization
        var api =
        new OpenAIClient(new OpenAIAuthentication(ApiKey, Organization));

        // Create a new fine-tuning job request with
        // the specified file (paramaFile)
        var request =
        new CreateFineTuneJobRequest(Model.GPT3_5_Turbo,paramaFile);

        // Create a fine-tuning job using the OpenAI API
        // and store the result in the fineTuneJob variable
        fineTuneJob =
        await api.FineTuningEndpoint.CreateJobAsync(request);
    }

    private async Task ListFineTuneJobs()
    {
        // Clear collection
        colFineTuneJob = new List<FineTuneJobResponse>();

        // Create a new OpenAI API client with the provided
        // API key and organization
        var api =
        new OpenAIClient(new OpenAIAuthentication(ApiKey, Organization));

        // Fetch the list of fine-tuning jobs using the OpenAI API
        var fineTuneJobs =
        await api.FineTuningEndpoint.ListJobsAsync();

        // Add each fetched fine-tuning job to the colFineTuneJob list
        foreach (var job in fineTuneJobs.Items)
        {
            colFineTuneJob.Add(job);
        }
    }

    private async Task DeleteFineTunedModel(FineTuneJobResponse paramaFineTuneJob)
    {
        // Create a new OpenAI API client with the provided
        //  API key and organization
        var api =
        new OpenAIClient(new OpenAIAuthentication(ApiKey, Organization));

        // Delete the fine-tuned model associated with the
        // specified fine-tuning job (paramaFineTuneJob)
        // using the OpenAI API
        var result =
        await api.ModelsEndpoint.DeleteFineTuneModelAsync(
        paramaFineTuneJob.FineTunedModel);

        // Update the list of fine-tuning jobs by calling
        // the ListFineTuneJobs method
        await ListFineTuneJobs();
    }

    // Models

    private async Task ListModels()
    {
        // Create a new OpenAI API client with the provided
        // API key and organization
        var api =
        new OpenAIClient(new OpenAIAuthentication(ApiKey, Organization));

        // Fetch the list of models using the OpenAI API
        var models =
        await api.ModelsEndpoint.GetModelsAsync();

        // Initialize a new list to store filtered models
        colModels = new List<Model>();

        // Iterate through the fetched models
        foreach (var model in models)
        {
            // Filter out models owned by "openai" or "system"
            if (!model.OwnedBy.Contains("openai")
            && !model.OwnedBy.Contains("system"))
            {
                // Add the filtered model to the colModels list
                colModels.Add(model);
            }
        }
    }

    private async Task DeleteModel(Model paramaModel)
    {
        // Create a new OpenAI API client with the provided
        // API key and organization
        var api =
        new OpenAIClient(new OpenAIAuthentication(ApiKey, Organization));

        // Delete the specified fine-tuned model (paramaModel)
        // using the OpenAI API
        var result =
        await api.ModelsEndpoint.DeleteFineTuneModelAsync(paramaModel.Id);

        // Update the list of models by calling the ListModels method
        await ListModels();
    }

    // Completion

    private async Task SubmitCompletion()
    {
        // Check if a completion model is selected
        // (CompletionModel is not empty)
        if (CompletionModel != "")
        {
            // Reset the completion response text
            CompletionResponse = "";

            // Create a new OpenAI API client with the
            // provided API key and organization
            var api =
            new OpenAIClient(new OpenAIAuthentication(ApiKey, Organization));

            // Fetch the details of the selected completion
            // model (CompletionModel) using the OpenAI API
            var objModel =
            await api.ModelsEndpoint.GetModelDetailsAsync(CompletionModel);

            // Define a list of stop sequences for the completion
            List<string> StopSequence = new List<string>() { "->", "." };

            var messages = new List<Message>
            {
                new Message(Role.System, "You are a helpful assistant."),
                new Message(Role.User, CompletionPrompt),
            };

            // Create a new instance of the ChatRequest class, passing in the
            // messages list, and other parameters

            var chatRequest = new ChatRequest(messages, maxTokens: 100, temperature: 0.1, stops: StopSequence.ToArray(), model: objModel);
            var ChatResponse = await api.ChatEndpoint.GetCompletionAsync(chatRequest);

            CompletionResponse = ChatResponse.FirstChoice.Message;
        }
    }
}