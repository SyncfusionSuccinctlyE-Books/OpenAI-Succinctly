@page "/editsexample"
@using OpenAI;
@using OpenAI.Edits;
@using OpenAI.Models;
@inject IConfiguration _configuration
<PageTitle>Edit Example</PageTitle>

<h1>Enter a sentence</h1>
<textarea rows="2" cols="75" @bind="prompt"></textarea>
<br />
<br />
<button class="btn btn-primary"
        @onclick="CallService">
    Fix Spellings
</button>
<br />
<br />
<h4>Response:</h4>
<br />
<p>@response</p>
@code {
    string Organization = "";
    string ApiKey = "";
    string prompt = "What day of the wek is it?";
    string response = "";
    protected override void OnInitialized()
    {
        Organization = 
        _configuration["OpenAIServiceOptions:Organization"] ?? "";

        ApiKey = 
        _configuration["OpenAIServiceOptions:ApiKey"] ?? "";
    }

    async Task CallService()
    {
        // Set the "response" variable to an empty string
        response = "";

        // Create a new instance of the "OpenAIClient" class and 
        // authenticate using an API key and organization ID
        var api = new OpenAIClient(new OpenAIAuthentication(ApiKey, Organization));

        // Define a new "EditRequest" object, passing in a prompt 
        // and an instruction to fix spelling mistakes
        var request = new EditRequest(prompt, "Fix the spelling mistakes");

        // Call the OpenAI API's "CreateEditAsync" method with the 
        // "EditRequest" object and await the result
        var result = await api.EditsEndpoint.CreateEditAsync(request);

        // Loop through the "Choices" property of the "result" 
        // object and append each completion text to the "response" variable
        foreach (var completion in result.Choices)
        {
            response += completion.Text;
        }
    }
}