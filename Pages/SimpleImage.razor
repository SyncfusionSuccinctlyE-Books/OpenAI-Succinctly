@page "/simpleimage"
@using OpenAI;
@using OpenAI.Images;
@using OpenAI.Models;
@inject IConfiguration _configuration
<PageTitle>Simple Image</PageTitle>

<h1>Describe the desired image</h1>
<input class="form-control" type="text"
       @bind="prompt" />
<br />
<button class="btn btn-primary"
        @onclick="CallService">
    Call The Service
</button>
<br />
<br />
<h4>Response:</h4>
<br />
<p>@response</p>
<p>@((MarkupString)ImageResponse)</p>
@code {
    string Organization = "";
    string ApiKey = "";
    string prompt = "";
    string response = "";
    string ImageResponse = "";
    protected override void OnInitialized()
    {
        Organization = _configuration["OpenAIServiceOptions:Organization"] ?? "";
        ApiKey = _configuration["OpenAIServiceOptions:ApiKey"] ?? "";

        prompt = "Realistic style 3D render of a cat ";
        prompt = prompt + "riding a horse holding a flag, 4k, ";
        prompt = prompt + "high resolution, trending in artstation";
    }

    // This code defines an asynchronous method, CallService,
    // which calls the OpenAI DALL-E API to generate images based 
    // on a given prompt.
    async Task CallService()
    {
        // Set initial response message
        response = "Calling service...";

        // Create a new instance of the OpenAIClient,
        // passing in an API key and organization to authenticate the client
        var api = 
        new OpenAIClient(new OpenAIAuthentication(ApiKey, Organization));

        // Call the GenerateImageAsync method of the ImagesEndPoint object
        // of the OpenAIClient to generate images based on the given prompt.

        var request = new ImageGenerationRequest(prompt, Model.DallE_3, 1);
        var results = await api.ImagesEndPoint.GenerateImageAsync(request);

        if (results.Count > 0)
        {
            response = "";

            // Iterate through each generated image and append the HTML code
            // for displaying the image to the 'ImageResponse' variable.
            foreach (var image in results)
            {
                ImageResponse += $@"<img src=""{image}"" />&nbsp;&nbsp;";
            }
        }
        else // If there are no generated images
        {
            // Set response message to indicate error
            response = "Unknown Error";
        }
    }
}