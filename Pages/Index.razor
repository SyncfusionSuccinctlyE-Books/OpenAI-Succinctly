@page "/"
@using OpenAI;
@using OpenAI.Chat
@using OpenAI.Models;
@inject IConfiguration _configuration
<PageTitle>Index</PageTitle>

<h1>Finish the Sentence</h1>
<textarea rows="3" cols="75" @bind="prompt"></textarea>
<br />
<br />
<button class="btn btn-primary"
        @onclick="CallService">
    Call The Service
</button>
<br />
<br />
<h4>Response:</h4>
<br />
<p>@response</p>
@code {
    // Define variables
    string Organization = "";
    string ApiKey = "";
    string prompt = "Once upon a time";
    string response = "";

    // OnInitialized method is called when the component is initialized
    protected override void OnInitialized()
    {
        // Get the OpenAI organization ID and API key from the
        // application's configuration settings
        Organization =
        _configuration["OpenAIServiceOptions:Organization"] ?? "";
        ApiKey =
        _configuration["OpenAIServiceOptions:ApiKey"] ?? "";
    }

    // CallService method: Calls the OpenAI API to
    // generate text completions
    async Task CallService()
    {
        // Create a new instance of OpenAIClient using
        // the ApiKey and Organization
        var api =
        new OpenAIClient(new OpenAIAuthentication(ApiKey, Organization));

        var messages = new List<Message>
        {
            new Message(Role.System, "You are a helpful assistant."),
            new Message(Role.User, prompt),
        };

        // Create a new instance of the ChatRequest class, passing in the
        // messages list, and other parameters

        var chatRequest = new ChatRequest(messages, maxTokens: 100, temperature: 0.1, model: Model.GPT3_5_Turbo);
        var ChatResponse = await api.ChatEndpoint.GetCompletionAsync(chatRequest);

        response = ChatResponse.FirstChoice.Message;
    }
}