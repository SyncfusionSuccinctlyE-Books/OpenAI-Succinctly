@page "/chatgpt"
@using OpenAI;
@using OpenAI.Chat;
@using OpenAI.Models;
@inject IConfiguration _configuration
@inject IJSRuntime _jsRuntime
<PageTitle>Chat GPT</PageTitle>
<style>
    textarea {
        border: 1px dashed #888;
        border-radius: 5px;
        width: 80%;
        overflow: auto;
        background: #f7f7f7
    }

    /* improved CSS for speech bubbles */

    .assistant, .user {
        position: relative;
        font-family: arial;
        font-size: 1.1em;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
    }

        .assistant:after, .user:after {
            content: '';
            border: 20px solid transparent;
            position: absolute;
            margin-top: -30px;
        }

    .user {
        background: #03a9f4;
        color: #fff;
        margin-left: 20%;
        margin-right: 100px;
        top: 30%;
        text-align: right;
    }

    .assistant {
        background: #4CAF50;
        color: #fff;
        margin-left: 100px;
        margin-right: 20%;
    }

    .user:after {
        border-left-color: #03a9f4;
        border-right: 0;
        right: -20px;
    }

    .assistant:after {
        border-right-color: #4CAF50;
        border-left: 0;
        left: -20px;
    }

    .msg {
        font-size: medium;
    }
</style>
<h1>ChatGPT</h1>
<p style="font-size:small"><b>Total Tokens:</b> @TotalTokens</p>
<div id="chatcontainer" style="height:550px; width:80%; overflow: scroll;">
    @foreach (var item in messages)
    {
        <div>
            @if (item.Role == "user")
            {
                <div style="float: right; margin-right: 20px; margin-top: 10px">
                    <b>Human</b>
                </div>
                <div class="@item.Role">
                    <div class="msg">
                        @item.Prompt
                        <br /><br />
                        <div style="font-size:xx-small;"><i><b>(@item.Tokens)</b> Tokens</i></div>
                    </div>
                </div>
            }
            else
            {
                <div style="float: left; margin-left: 20px; margin-top: 10px">
                    <b>ChatGPT&nbsp;&nbsp;</b>
                </div>
                <div class="@item.Role">
                    <div class="msg">
                        @if (item.Prompt != null)
                        {
                            @((MarkupString)item.Prompt)
                        }
                        <br /><br />
                        <div style="font-size:xx-small;"><i><b>(@item.Tokens)</b> Tokens</i></div>
                    </div>
                </div>
            }
        </div>
    }
</div>
@if (!Processing)
{
    <textarea rows="3" cols="60" @bind="prompt" />
    <br />
    <button class="btn btn-primary" @onclick="CallChatGPT">Call ChatGPT</button>
    <span>&nbsp;</span>
    <button class="btn btn-info" @onclick="RestartChatGPT">Restart</button>
}
else
{
    <br>
    <h4>Processing...</h4>
}
<br /><p style="color:red">@ErrorMessage</p>
@code {
    string Organization = "";
    string ApiKey = "";

    List<Message> messages = new List<Message>();
    string prompt = "Write a 10 word description of OpenAI ChatGPT";
    string ErrorMessage = "";
    bool Processing = false;
    int TotalTokens = 0;

    protected override void OnInitialized()
    {
        Organization = _configuration["OpenAIServiceOptions:Organization"] ?? "";
        ApiKey = _configuration["OpenAIServiceOptions:ApiKey"] ?? "";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatcontainer");
        }
        catch
        {
            // do nothing if this fails
        }
    }

    async Task CallChatGPT()
    {
        try
        {
            // Set Processing to true to indicate that the method is processing
            Processing = true;

            // Call StateHasChanged to refresh the UI
            StateHasChanged();

            // Clear any previous error messages
            ErrorMessage = "";

            // Create a new OpenAIClient object
            // with the provided API key and organization
            var api = new OpenAIClient(new OpenAIAuthentication(ApiKey, Organization));

            // Create a new list of ChatPrompt objects and initialize it with the
            // system's introductory message
            var chatPrompts = new List<ChatPrompt>();
            chatPrompts.Add(new ChatPrompt("system", "You are helpful Assistant"));

            // Add all existing messages to chatPrompts
            foreach (var item in messages)
            {
                chatPrompts.Add(new ChatPrompt(item.Role, item.Prompt));
            }

            // Add the new message to chatPrompts
            chatPrompts.Add(new ChatPrompt("user", prompt));

            // Call ChatGPT
            // Create a new ChatRequest object with the chat prompts and pass
            // it to the API's GetCompletionAsync method
            var chatRequest = new ChatRequest(chatPrompts);
            var result = await api.ChatEndpoint.GetCompletionAsync(chatRequest);

            // Create a new Message object with the user's prompt and other
            // details and add it to the messages list
            messages.Add(new Message
                {
                    Prompt = prompt,
                    Role = "user",
                    Tokens = result.Usage.PromptTokens
                });

            // Create a new Message object with the response and other details
            // and add it to the messages list
            messages.Add(new Message
                {
                    Prompt = result.FirstChoice.Message,
                    Role = "assistant",
                    Tokens = result.Usage.CompletionTokens
                });

            // Update the total number of tokens used by the API
            TotalTokens = TotalTokens + result.Usage.TotalTokens;
        }
        catch (Exception ex)
        {
            // Set ErrorMessage to the exception message if an error occurs
            ErrorMessage = ex.Message;
        }
        finally
        {
            // Clear the prompt variable
            prompt = "";

            // Set Processing to false to indicate
            // that the method is done processing
            Processing = false;

            // Call StateHasChanged to refresh the UI
            StateHasChanged();
        }
    }

    void RestartChatGPT()
    {
        prompt = "Write a 10 word description of OpenAI ChatGPT";
        messages = new List<Message>();
        TotalTokens = 0;
        ErrorMessage = "";
        StateHasChanged();
    }

    public class Message
    {
        public string? Prompt { get; set; }
        public string? Role { get; set; }
        public int Tokens { get; set; }
    }
}