@page "/whisperexample"
@using OpenAI;
@using OpenAI.Audio;
@using OpenAI.Edits;
@using OpenAI.Models;
@inject IConfiguration _configuration
<PageTitle>Whisper Example</PageTitle>

<h1>Whisper Transcription</h1>

<button class="btn btn-primary"
        @onclick="UploadFile">
    Upload File
</button>
<br />
<br />
<h4>Response:</h4>
@if (!Processing)
{
    <textarea rows="10" cols="75" @bind="response" />
}
else
{
    <br>
    <h4>Processing...</h4>
}
@code {
    string Organization = "";
    string ApiKey = "";
    string response = "";
    bool Processing = false;

    protected override void OnInitialized()
    {
        Organization = _configuration["OpenAIServiceOptions:Organization"] ?? "";
        ApiKey = _configuration["OpenAIServiceOptions:ApiKey"] ?? "";
    }

    private async Task UploadFile()
    {
        // Set response to empty string
        response = "";

        // Set Processing to true
        Processing = true;

        // Trigger a UI refresh
        StateHasChanged();

        // Create an instance of the OpenAIClient
        // using the provided API key and organization
        var api =
        new OpenAIClient(new OpenAIAuthentication(ApiKey, Organization));

        // Set the audioAssetPath to a sample audio file
        string audioAssetPath =
        @"SampleData/Calling OpenAI GPT-3 From Microsoft Blazor.mp4";

        // Create an AudioTranscriptionRequest object
        // with the audio file path and language
        var request =
        new AudioTranscriptionRequest(
            Path.GetFullPath(audioAssetPath), language: "en");

        // Perform audio transcription using the
        // OpenAI API and set the response string
        response =
        await api.AudioEndpoint.CreateTranscriptionAsync(request);

        // Set Processing to false and trigger a UI refresh
        Processing = false;
        StateHasChanged();
    }
}